using System.Collections;
using System.Collections.Generic;
using UnityEngine;
/**
 * 
 * 步骤1：创建抽象工厂类，定义具体工厂的公共接口；
 * 步骤2：创建抽象产品类，定义具体产品的公共接口；
 * 步骤3：创建具体产品类（继承抽象产品类） &定义生产的具体产品；
 * 步骤4：创建具体工厂类（继承抽象工厂类），定义创建对应具体产品实例的方法；
 * 步骤5：外界通过调用具体工厂类的方法，从而创建不同具体产品类的实例
 * 
 * 
 * 添加新产品时，除了增加新产品类外，还要提供与之对应的具体工厂类，系统类的个数将成对增加，在一定程度上增加了系统的复杂度；同时，有更多的类需要编译和运行，会给系统带来一些额外的开销；
 * 由于考虑到系统的可扩展性，需要引入抽象层，在客户端代码中均使用抽象层进行定义，增加了系统的抽象性和理解难度，且在实现时可能需要用到DOM、反射等技术，增加了系统的实现难度。
 * 虽然保证了工厂方法内的对修改关闭，但对于使用工厂方法的类，如果要更换另外一种产品，仍然需要修改实例化的具体工厂类；
 * 一个具体工厂只能创建一种具体产品
 * 
 * **/
public abstract class Factory
{
	public abstract Product Manufacture();
}

